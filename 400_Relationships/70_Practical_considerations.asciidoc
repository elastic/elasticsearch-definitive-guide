[[parent-child-performance]]
=== Practical considerations

Parent-child joins can be a useful technique for managing relationships when
index-time performance is more important than search-time performance, but it
comes at a significant cost.  Parent-child queries can be 5 to 10 times slower
than the equivalent nested query!

On top of that, parent-child uses memory.  The string `_id` field of every
parent document has to be held in memory, and every child document requires 8
bytes (a long value) of memory.  Actually, it's a bit less thanks to
compression, but this gives you a rough idea.

You can check how much memory is being used by the parent-child cache by
consulting the `indices-stats` API (for a summary at the index level) or the
`node-stats` API (for a summary at the node level):

[source,json]
-------------------------
GET /_nodes/stats/indices/id_cache?human <1>
-------------------------
<1> Returns memory use of the ID cache summarized by node in a human friendly format.

The ability to join multiple generations (see <<grandparents>>) sounds very
attractive until you think of the costs involved:

* The more joins you have, the worse performance will be.
* Each generation of parents needs to have their string `_id` fields stored in
  memory, which can consume a lot of RAM.

[TIP]
=========================

Some advice about parent-child relationships:

* Use parent-child relationships sparingly.
* Don't use multiple parent-child joins in a single query.
* Avoid scoring by using the `has_child` filter, or the `has_child` query with
  `score_mode` set to `none`.
* Keep the parent IDs short, so that they require less memory.

*Above all:* think about the other techniques that we have discussed in this
chapter before reaching for parent-child.

=========================



