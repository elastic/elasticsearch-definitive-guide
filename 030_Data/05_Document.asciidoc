[[document]]
=== What Is a Document?

Most entities or objects in most applications can be serialized into a JSON
object, with keys and values.((("objects")))((("JSON", "objects")))((("keys and values"))) A _key_ is the name of a field or property,
and a _value_ can ((("values")))be a string, a number, a Boolean, another object, an array
of values, or some other specialized type such as a string representing a date
or an object representing a geolocation:

[source,js]
--------------------------------------------------
{
    "name":         "John Smith",
    "age":          42,
    "confirmed":    true,
    "join_date":    "2014-06-01",
    "home": {
        "lat":      51.5,
        "lon":      0.1
    },
    "accounts": [
        {
            "type": "facebook",
            "id":   "johnsmith"
        },
        {
            "type": "twitter",
            "id":   "johnsmith"
        }
    ]
}
--------------------------------------------------


Often, we use the terms _object_ and _document_ interchangeably. However,
there is a distinction.((("objects", "documents versus")))((("documents", "objects versus")))  An object is just a JSON object--similar to what is
known as a hash, hashmap, dictionary, or associative array. Objects may contain
other objects. In Elasticsearch, the term _document_ has a specific meaning. It refers
to the top-level, or root object that((("root object"))) is serialized into JSON and
stored in Elasticsearch under a unique ID.

WARNING: Field names can be any valid string, but _may not_ include periods.

=== Document Metadata

A document doesn't consist only of its data.((("documents", "metadata"))) It also has
_metadata_&#x2014;information _about_ the document.((("metadata, document"))) The three required metadata
elements are as follows:


 `_index`::
   Where the document lives

 `_type`::
   The class of object that the document represents (deprecated)

 `_id`::
   The unique identifier for the document

==== _index

An _index_ is a collection of documents that should be grouped together for a
common reason.  For example, you may store all your products in a `products` index,
while all your sales transactions go in `sales`.  Although it is possible to store
unrelated data together in a single index, it is often considered an anti-pattern.

[TIP]
====
Actually, in Elasticsearch, our data is stored and indexed in _shards_,
while an index is just a logical namespace that groups together one or more
shards.((("shards", "grouped in indices"))) However, this is an internal detail; our application shouldn't care
about shards at all.  As far as our application is concerned, our documents
live in an _index_. Elasticsearch takes care of the details.
====

We cover how to create and manage indices ourselves in <<index-management>>,
but for now we will let Elasticsearch create the index for us.  All we have to
do is choose an index name.  This name must be lowercase, cannot begin with an
underscore, and cannot contain commas. Let's use `website` as our index name.

==== _type

If you're just starting out with version 6.0+ of Elasticsearch, then suffice to say, you may only create one `_type` per index.

For indices created in 5.x and before, there may be more than one `_type` per index.

In a future version of Elasticsearch, `_type` will be removed completely. For best results, plan to create your indices with exactly one `_type`, and consider calling it `doc`, which is the Elasticsearch default.

==== _id

The _ID_ is a string that,((("id", "&#x5f;id, in document metadata"))) when combined with the `_index` and `_type`,
uniquely identifies a document in Elasticsearch. When creating a new document,
you can either provide your own `_id` or let Elasticsearch generate one for
you.

==== Other Metadata

There are several other metadata elements, which are presented in
<<mapping>>. With the elements listed previously, we are already able to store a
document in Elasticsearch and to retrieve it by ID--in other words, to use
Elasticsearch as a document store.
