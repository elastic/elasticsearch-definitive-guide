=== Most Important Queries

While Elasticsearch comes with many queries, you will use
just a few frequently. We discuss them in much greater
detail in <<search-in-depth>> but next we give you a quick introduction to
the most important queries.

==== match_all Query

The `match_all` query simply((("match_all query")))((("queries", "important"))) matches all documents. It is the default
query that is used if no query has been specified:

[source,js]
--------------------------------------------------
{ "match_all": {}}
--------------------------------------------------
// SENSE: 054_Query_DSL/70_Match_all_query.json


This query is frequently used in combination with a filter--for instance, to
retrieve all emails in the inbox folder. All documents are considered to be
equally relevant, so they all receive a neutral `_score` of `1`.

==== match Query

The `match` query should be the standard((("match query"))) query that you reach for whenever
you want to query for a full-text or exact value in almost any field.

If you run a `match` query against a full-text field, it will analyze
the query string by using the correct analyzer for that field before executing
the search:

[source,js]
--------------------------------------------------
{ "match": { "tweet": "About Search" }}
--------------------------------------------------
// SENSE: 054_Query_DSL/70_Match_query.json

If you use it on a field containing an exact value, ((("exact values", "searching for, match queries and")))such as a number, a date,
a Boolean, or a `not_analyzed` string field, then it will search for that
exact value:

[source,js]
--------------------------------------------------
{ "match": { "age":    26           }}
{ "match": { "date":   "2014-09-01" }}
{ "match": { "public": true         }}
{ "match": { "tag":    "full_text"  }}
--------------------------------------------------
// SENSE: 054_Query_DSL/70_Match_query.json

TIP: For exact-value searches, you probably want to use a filter clause instead of a
query, as a filter will be cached.  We'll see some filtering examples soon.

Unlike the query-string search that we showed in <<search-lite>>, the `match`
query does not use a query syntax like `+user_id:2 +tweet:search`. It just
looks for the words that are specified. This means that it is safe to expose
to your users via a search field; you control what fields they can query, and
it is not prone to throwing syntax errors.

==== multi_match Query

The `multi_match` query allows((("multi_match queries"))) to run the same `match` query on multiple
fields:

[source,js]
--------------------------------------------------
{
    "multi_match": {
        "query":    "full text search",
        "fields":   [ "title", "body" ]
    }
}
--------------------------------------------------
// SENSE: 054_Query_DSL/70_Multi_match_query.json


==== range Query

The `range` query allows you to find((("range query"))) numbers or dates that fall into
a specified range:

[source,js]
--------------------------------------------------
{
    "range": {
        "age": {
            "gte":  20,
            "lt":   30
        }
    }
}
--------------------------------------------------
// SENSE: 054_Query_DSL/70_Range_filter.json

The operators that it accepts are as follows:

 `gt`::
   Greater than

 `gte`::
   Greater than or equal to

 `lt`::
   Less than

 `lte`::
   Less than or equal to

==== term Query

The `term` query is used to search by((("query", "important")))((("term query"))) exact values, be they numbers, dates,
Booleans, or `not_analyzed` exact-value string fields:

[source,js]
--------------------------------------------------
{ "term": { "age":    26           }}
{ "term": { "date":   "2014-09-01" }}
{ "term": { "public": true         }}
{ "term": { "tag":    "full_text"  }}
--------------------------------------------------
// SENSE: 054_Query_DSL/70_Term_filter.json

The `term` query performs no _analysis_ on the input text, so it will look for exactly
the value that is supplied.

==== terms Query

The `terms` query is((("terms query"))) the same as the `term` query, but allows you
to specify multiple values to match. If the field contains any of
the specified values, the document matches:

[source,js]
--------------------------------------------------
{ "terms": { "tag": [ "search", "full_text", "nosql" ] }}
--------------------------------------------------
// SENSE: 054_Query_DSL/70_Terms_filter.json

Like the `term` query, no analysis is performed on the input text.  It is looking
for exact matches (including differences in case, accents, spaces, etc).


==== exists and missing Queries

The `exists` and `missing` queries are ((("exists query")))((("missing query")))used to find documents in which the
specified field either has one or more values (`exists`) or doesn't have any
values (`missing`). It is similar in nature to `IS_NULL` (`missing`) and `NOT
IS_NULL` (`exists`)in SQL:

[source,js]
--------------------------------------------------
{
    "exists":   {
        "field":    "title"
    }
}
--------------------------------------------------
// SENSE: 054_Query_DSL/70_Exists_filter.json

These queries are frequently used to apply a condition only if a field is
present, and to apply a different condition if it is missing.
