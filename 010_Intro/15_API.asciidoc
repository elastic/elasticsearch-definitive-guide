=== Talking to Elasticsearch

==== RESTful API with JSON over HTTP
Older versions of Elasticsearch (pre-version 6.0) were able to use a Java API for communicating with Elasticsearch. This method is no longer recommended.

The preferred method for all languages is to communicate with Elasticsearch((("port 9200 for non-Java clients"))) over port _9200_ using
a ((("RESTful API, communicating with Elasticseach")))RESTful API, accessible with your favorite web client. In fact, as you have
seen, you can even talk to Elasticsearch from the command line by using the
`curl` command.((("curl command", "talking to Elasticsearch with")))

NOTE: Elasticsearch provides official clients((("clients", "other than Java"))) for several languages--Groovy,
JavaScript, .NET, PHP, Perl, Python, and Ruby--and there are numerous
community-provided clients and integrations, all of which can be found in
https://www.elastic.co/guide/en/elasticsearch/client/index.html[Elasticsearch Clients].

A request to Elasticsearch consists of the same parts as any HTTP request:((("HTTP requests")))((("requests to Elasticsearch")))

Please note that as of version 6.0 of Elasticsearch, any HTTP request must provide a `Content-Type` header if there is a body in the request.

[source,js]
--------------------------------------------------
curl -X<VERB> '<PROTOCOL>://<HOST>:<PORT>/<PATH>?<QUERY_STRING>' -d '<BODY>' -H 'Content-Type: application/json'
--------------------------------------------------

The parts marked with `< >` above are:

[horizontal]
`VERB`::            The appropriate HTTP _method_ or _verb_: `GET`, `POST`, `PUT`, `HEAD`, or `DELETE`.
`PROTOCOL`::        Either `http` or `https` (if you have an `https` proxy in front of Elasticsearch.)
`HOST`::            The hostname of any node in your Elasticsearch cluster, or +localhost+ for a node on your local machine.
`PORT`::            The port running the Elasticsearch HTTP service, which defaults to `9200`.
`PATH`::            API Endpoint (for example `_count` will return the number of documents in the cluster). Path may contain multiple components, such as `_cluster/stats` or `_nodes/stats/jvm`
`QUERY_STRING`::    Any optional query-string parameters (for example `?pretty` will _pretty-print_  the JSON response to make it easier to read.)
`BODY`::            A JSON-encoded request body (if the request needs one.)


For instance, to count the number of documents in the cluster, we could use this:

[source,js]
--------------------------------------------------
curl -XGET 'http://localhost:9200/_count?pretty' -H 'Content-Type: application/json' -d '
{
    "query": {
        "match_all": {}
    }
}
'
--------------------------------------------------

Elasticsearch returns an HTTP status code like `200 OK` and (except for `HEAD`
requests) a JSON-encoded response body. The preceding `curl` request would respond
with a JSON body like the following:

[source,js]
--------------------------------------------------
{
  "count" : 1,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  }
}
--------------------------------------------------

We don't see the HTTP headers in the response because we didn't ask `curl` to
display them. To see the headers, use the `curl` command with the `-i`
switch:

[source,js]
--------------------------------------------------
curl -i -XGET 'localhost:9200/'
--------------------------------------------------

For the rest of the book, we will show these `curl` examples using a shorthand
format that leaves out all the bits that are the same in every request,
like the hostname and port, and the `curl` command itself. Instead of showing
a full request like

[source,js]
--------------------------------------------------
curl -XGET 'http://localhost:9200/_count?pretty' -H 'Content-Type: application/json' -d '
{
    "query": {
        "match_all": {}
    }
}
'
--------------------------------------------------

we will show it in this shorthand format:

[source,js]
--------------------------------------------------
GET /_count
{
    "query": {
        "match_all": {}
    }
}
--------------------------------------------------
// SENSE: 010_Intro/15_Count.json

In fact, this is the same format that is used by the ((( "Console")))((("Console (Kibana app)", "curl requests in"))) <<sense, Console>>. If you're viewing the online version of this book, you can open and run this code example in Console by clicking the View in Console link above.
