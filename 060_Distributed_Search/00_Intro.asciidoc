[[distributed-search]]
== Distributed Search Execution
== 분산 검색 실행

Before moving on, we are going to take a detour and talk about how search is
executed in a distributed environment.((("distributed search execution")))  It is a bit more complicated than the
basic _create-read-update-delete_ (CRUD) requests((("CRUD (create-read-update-delete) operations"))) that we discussed in
<<distributed-docs>>.

잠시 주제를 전환하여 분산 환경에서 검색이 어떻게 실행되는지에 대해 논할 것이다.((("분산 검색 실행")))
분산 환경에서의 검색은 우리가 <<distributed-docs>>에서 다루었던 기본적인 _create-read-update-delete_ (CRUD) 요청((("CRUD (create-read-update-delete) operations")))보다는 좀 더 복잡하다.

.Content Warning
****

The information presented in this chapter is for your interest. You are not required to
understand and remember all the detail in order to use Elasticsearch.

이 장에서 다루는 내용은 관심을 가진 사용자를 위한 것이다.
Elasticsearch를 사용하기 위해 이 장의 내용을 모두 이해하고 기억해야 하는 것은 아니다.

Read this chapter to gain a taste for how things work, and to know where the
information is in case you need to refer to it in the future, but don't be
overwhelmed by the detail.

이 장을 학습하면 분산 검색의 동작 원리를 이해할 수 있으며, 이후에 참조할 정보가 어디에 있는지를 알 수 있게 된다.
하지만, 상세한 내용까지 파악하려고 진을 뺄 필요는 없다.

****

A CRUD operation deals with a single document that has a unique combination of
`_index`, `_type`, and <<routing-value,`routing` values>> (which defaults to the
document's `_id`). This means that we know exactly which shard in the cluster
holds that document.

CRUD 연산은 `_index`, `_type`, 그리고 (문서의 `_id`를 기본 값으로 가지는)<<routing-value,`routing` 값>>의 유일한 조합을 가진 단일 문서에 대해 이루어진다.
이것은 우리가 그 문서가 정확히 어떤 샤드에 있는지를 알 수 있다는 뜻이다.

Search requires a more complicated execution model because we don't know which
documents will match the query: they could be on any shard in the cluster. A
search request has to consult a copy of every shard in the index or indices
we're interested in to see if they have any matching documents.

검색에는 더 복잡한 실행 모델이 필요하다. 질의를 만족하는 문서가 클러스터 안의 어떤 샤드에 있는지 알 수 없기 때문이다.
검색을 요청하면, 질의 대상이 된 하나 또는 그 이상의 인덱스에 있는 모든 샤드를 조회하여 질의를 만족하는 문서를 포함하는지 여부를 확인해야 한다.

But finding all matching documents is only half the story. Results from
multiple shards must be combined into a single sorted list before the `search`
API can return a ``page'' of results. For this reason, search is executed in a
two-phase process called _query then fetch_.

하지만, 질의를 만족하는 문서를 찾는 것만이 다가 아니다.
`검색` API가 결과 ``페이지''를 반환하기 전에, 다수의 샤드에 분산된 결과를 하나의 정렬된 리스트로 정렬해야 한다.
이런 사유로, 검색은 _질의 후 반환(query then fetch)_로 불리는 두 단계의 프로세스로 실행된다.
