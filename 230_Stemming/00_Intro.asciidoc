[[stemming]]
== Reducing words to their root form

Most languages of the world are *inflected*, meaning that words can change
their form to express differences in:

[horizontal]
_number_::      fox, foxes
_tense_::       pay, paid, paying
_gender_::      waiter, waitress
_person_::      hear, hears
_case_::        I, me, my
_aspect_::      ate, eaten
_mood_::        so *be* it, *were* it so

While inflection aids expressivity, it interferes with retrievability as a
single root _word sense_ or meaning may be represented by many different
sequences of letters. English is a weakly inflected language -- you could
ignore inflections and still get reasonable search results -- but some other
languages are highly inflected and need extra work in order to achieve
high quality search results.

_Stemming_ attempts to remove the difference between inflected forms of a
word, in order to reduce each word to its root form. For instance `foxes` may
be reduced to the root `fox`, to remove the difference between singular and
plural in the same way that we removed the difference between lower case and
upper case.

The root form of a word may not even be a real word. The words `jumping` and
`jumpiness` may both be stemmed to `jumpi`. It doesn't matter -- as long as
the same terms are produced at index time and at search time, search will just
work.

If stemming were easy, there would be only one implementation. Unfortunately,
stemming is an inexact science which suffers from two issues: _understemming_
and _overstemming_.

Understemming is the failure to reduce words with the same meaning to the same
root. For example, `jumped`, and `jumps` may be reduced to `jump`, while
`jumping` may be reduced to `jumpi`.  Understemming reduces retrieval --
relevant documents are not returned.

Overstemming is the failure to keep two words with distinct meaning separate.
For instance `general` and `generate` may both be stemmed to `gener`.
Overstemming reduces precision -- irrelevant documents are returned when they
shouldn't be.

.Lemmatisation
**********************************************

A _lemma_ is the canonical or dictionary form of a set of related words -- the
lemma of `paying`, `paid` and `pays` is `pay`.  Usually the lemma resembles
the words it is related to but sometimes it doesn't -- the lemma of `is`,
`was`, `am` and `being` is `be`.

Lemmatisation, like stemming, tries to group related words, but it goes one
step further than stemming in that it tries to group words by their _word
sense_ or meaning.  The same word may represent two different meanings --
``wake'' can mean ``to wake up'' or ``a funeral''.  While lemmatisation would
try to distinguish these two word senses, stemming would incorrectly conflate
them.

Lemmatisation is a much more complicated and expensive process that needs to
understand the context in which words appear in order to make decisions
about what they mean. In practice, stemming appears to be just as effective
as lemmatisation, but with a much lower cost.

**********************************************

First we will discuss the two classes of stemmers available in Elasticsearch
-- <<algorithmic-stemmers>> and <<dictionary-stemmers>> -- then look at how to
choose the right stemmer for your needs in <<choosing-a-stemmer>>.  Finally,
we will discuss options for tailoring stemming in <<controlling-stemming>> and
<<stemming-in-situ>>.



